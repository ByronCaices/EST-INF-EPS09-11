print(durbinWatsonTest(modeloSimple))
mm1 = marginalModelPlots(modeloSimple, sd = TRUE, id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n")
cat("Cambio en el error:", round(cambioError, 2), "\n")
cat("\n")
cat("Rendimiento del modelo de RLM:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n")
cat("Cambio en el error:", round(cambioError2, 2), "\n")
View(datosModelos)
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n")
cat("Cambio en el error:", round(cambioError, 2), "\n")
cat("\n")
cat("Rendimiento del modelo de RLM:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n")
cat("Cambio en el error:", round(cambioError2, 2), "\n")
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
print("Rendimiento del modelo de RLS:\n")
print("RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n")
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n
RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n
RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n
Cambio en el error:", round(cambioError, 2), "\n
\n
Rendimiento del modelo de RLM:\n
RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n
RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n
Cambio en el error:", round(cambioError2, 2), "\n")
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales[["IMC"]] = datosGenerales[["Weight"]] / ((datosGenerales[["Height"]]/100)^2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
datosGenerales[["IMC"]] = datosGenerales[["Weight"]] / ((datosGenerales[["Height"]]/100)^2)
datosSobrepeso = datosGenerales %>% filter(IMC < 23.2)
datosPesoNormal = datosGenerales %>% filter(IMC >= 23.2)
datosSobrepeso[["EN"]] = 1
datosPesoNormal[["EN"]] = 0
View(datosPesoNormal)
datosGenerales[["IMC"]] = datosGenerales[["Weight"]] / ((datosGenerales[["Height"]]/100)^2)
datosSobrepeso = datosGenerales %>% filter(IMC < 23.2)
datosPesoNormal = datosGenerales %>% filter(IMC >= 23.2)
datosSobrepeso[["EN"]] = 1
datosPesoNormal[["EN"]] = 0
View(datosGenerales)
set.seed(4545)  # semilla impar, tomamos muestra de 150 hombres
datosSobrepeso = datosSobrepeso %>% filter(Gender == 1) %>% sample_n(75)
datosPesoNormal = datosPesoNormal %>% filter(Gender == 1) %>% sample_n(75)
idatosSobre = sample.int(50)
idatosNormal = sample.int(50)
datosEntrenamiento = rbind(datosSobrepeso[idatosSobre,], datosPesoNormal[idatosNormal,])
datosPrueba = rbind(datosSobrepeso[-idatosSobre,], datosPesoNormal[-idatosNormal,])
View(datosEntrenamiento)
View(datosPrueba)
datosSobrepeso = datosSobrepeso %>% filter(Gender == 1) %>% sample_n(75)
datosPesoNormal = datosPesoNormal %>% filter(Gender == 1) %>% sample_n(75)
idatosSobre = sample.int(50)
idatosNormal = sample.int(50)
datosEntrenamiento = rbind(datosSobrepeso[idatosSobre,], datosPesoNormal[idatosNormal,])
datosPrueba = rbind(datosSobrepeso[-idatosSobre,], datosPesoNormal[-idatosNormal,])
View(datosPrueba)
modelo <- glm(EN ~ Waist.Girth, data = datosEntrenamiento, family = binomial(link = "logit"))
summary(modelo)
modeloNulo <- glm(EN ~ 1, data = datosEntrenamiento, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosEntrenamiento, family = binomial(link = "logit"))
modeloAjustado <- step(modeloNulo, scope = list(lower = modeloNulo, upper = modeloMaximo), direction = "both", trace = FALSE)
summary(modeloAjustado)
modeloNulo <- glm(EN ~ 1, data = datosEntrenamiento, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosEntrenamiento, family = binomial(link = "logit"))
modeloAjustado <- step(modeloNulo, scope = list(upper = modeloMaximo), direction = "both", trace = FALSE)
summary(modeloAjustado)
modeloNulo <- glm(EN ~ 1, data = datosEntrenamiento, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosEntrenamiento, family = binomial(link = "logit"))
modeloAjustado <- step(modeloNulo, scope = list(lower = modeloNulo, upper = modeloMaximo), direction = "both", trace = FALSE)
summary(modeloAjustado)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
modeloNulo <- glm(EN ~ 1, data = datosEntrenamiento, family = binomial(link = "logit"))
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
datosGenerales[["IMC"]] = datosGenerales[["Weight"]] / ((datosGenerales[["Height"]]/100)^2)
datosSobrepeso = datosGenerales %>% filter(IMC < 23.2)
datosPesoNormal = datosGenerales %>% filter(IMC >= 23.2)
datosSobrepeso[["EN"]] = 1
datosPesoNormal[["EN"]] = 0
set.seed(4545)  # semilla impar, tomamos muestra de 150 hombres
datosSobrepeso = datosSobrepeso %>% filter(Gender == 1) %>% sample_n(75)
datosPesoNormal = datosPesoNormal %>% filter(Gender == 1) %>% sample_n(75)
idatosSobre = sample.int(50)
idatosNormal = sample.int(50)
datosEntrenamiento = rbind(datosSobrepeso[idatosSobre,], datosPesoNormal[idatosNormal,])
datosPrueba = rbind(datosSobrepeso[-idatosSobre,], datosPesoNormal[-idatosNormal,])
predictores = c("Knee.Girth", "Weight", "Chest.diameter", "Wrist.Minimum.Girth", "Thigh.Girth", "Height", "Calf.Maximum.Girth", "Gender" )
modelo <- glm(EN ~ Waist.Girth, data = datosEntrenamiento, family = binomial(link = "logit"))
summary(modelo)
modeloNulo <- glm(EN ~ 1, data = datosEntrenamiento, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosEntrenamiento, family = binomial(link = "logit"))
# Un paso hacia adelante:
cat("\nPaso 1:\n----------------\n")
print(add1(modeloNulo, scope = modeloMaximo))
modelo1 <- update(modeloNulo, . ~ . + Waist.Girth)
View(datosEntrenamiento)
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloNulo <- glm(EN ~ 1, data = datosEntrenamiento, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosEntrenamiento, family = binomial(link = "logit"))
# Un paso hacia adelante:
cat("\nPaso 1:\n----------------\n")
print(add1(modeloNulo, scope = modeloMaximo))
modelo1 <- update(modeloNulo, . ~ . + Waist.Girth)
View(datosPredictores)
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloNulo <- glm(EN ~ 1, data = datosPredictores, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosPredictores, family = binomial(link = "logit"))
# Un paso hacia adelante:
cat("\nPaso 1:\n----------------\n")
print(add1(modeloNulo, scope = modeloMaximo))
modelo1 <- update(modeloNulo, . ~ . + Waist.Girth)
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloNulo <- glm(EN ~ 1, data = datosPredictores, family = binomial(link = "logit"))
modeloMaximo <- glm(EN ~ ., data = datosPredictores, family = binomial(link = "logit"))
# Un paso hacia adelante:
cat("\nPaso 1:\n----------------\n")
print(add1(modeloNulo, scope = modeloMaximo))
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloNulo <- glm(EN ~ 1, data = datosPredictores, family = binomial(link = "logit"))
print(summary(modeloNulo))
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
p1 <- ggscatter(datosModelos, x = "Waist.Girth", y = "Weight",
add = "reg.line", add.params = list(color = "blue"))
print(p1)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>%
select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
paso = drop1(modeloCompleto, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple1 = update(modeloCompleto, . ~ . - Knee.Girth)
paso = drop1(modeloMultiple1, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple2 = update(modeloMultiple1, . ~ . - Chest.diameter)
paso = drop1(modeloMultiple2, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple3 = update(modeloMultiple2, . ~ . - Calf.Maximum.Girth)
print(summary(modeloMultiple2))
print(summary(modeloMultiple3))
modeloMultiple = modeloMultiple2
g1 = residualPlots(modeloSimple, type = "rstandard", id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
print(durbinWatsonTest(modeloSimple))
mm1 = marginalModelPlots(modeloSimple, sd = TRUE, id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n
RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n
RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n
Cambio en el error:", round(cambioError, 2), "\n
\n
Rendimiento del modelo de RLM:\n
RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n
RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n
Cambio en el error:", round(cambioError2, 2), "\n")
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloMaximo <- glm(EN ~ ., data = datosPredictores, family = binomial(link = "logit"))
print(summary(modeloNulo))
View(datosModelos)
predictores = c("Knee.Girth", "Weight", "Chest.diameter", "Wrist.Minimum.Girth", "Thigh.Girth", "Height", "Calf.Maximum.Girth")
modelo <- glm(EN ~ Waist.Girth, data = datosEntrenamiento, family = binomial(link = "logit"))
summary(modelo)
View(datosPredictores)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
datosGenerales[["IMC"]] = datosGenerales[["Weight"]] / ((datosGenerales[["Height"]]/100)^2)
datosSobrepeso = datosGenerales %>% filter(IMC < 23.2)
datosPesoNormal = datosGenerales %>% filter(IMC >= 23.2)
datosSobrepeso[["EN"]] = 1
datosPesoNormal[["EN"]] = 0
set.seed(4545)  # semilla impar, tomamos muestra de 150 hombres
datosSobrepeso = datosSobrepeso %>% filter(Gender == 1) %>% sample_n(75)
datosPesoNormal = datosPesoNormal %>% filter(Gender == 1) %>% sample_n(75)
idatosSobre = sample.int(50)
idatosNormal = sample.int(50)
datosEntrenamiento = rbind(datosSobrepeso[idatosSobre,], datosPesoNormal[idatosNormal,])
datosPrueba = rbind(datosSobrepeso[-idatosSobre,], datosPesoNormal[-idatosNormal,])
predictores = c("Knee.Girth", "Weight", "Chest.diameter", "Wrist.Minimum.Girth", "Thigh.Girth", "Height", "Calf.Maximum.Girth")
modelo <- glm(EN ~ Waist.Girth, data = datosEntrenamiento, family = binomial(link = "logit"))
summary(modelo)
View(modelo)
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloMaximo <- glm(EN ~ ., data = datosPredictores, family = binomial(link = "logit"))
print(summary(modeloNulo))
# Datos con solo predictores:
datosPredictores <- datosEntrenamiento[, c("EN", predictores)]
modeloMaximo <- glm(EN ~ ., data = datosPredictores, family = binomial(link = "logit"))
print(summary(modeloMaximo))
View(datosPredictores)
library(ggpubr)
library(dplyr)
opt <- options(warn = 1, width = 26)
# cargar y filtrar datos, solo predictores numéricos
datos <- mtcars |> filter(wt > 2 & wt < 5) |>
select(-c("cyl", "vs", "gear", "carb")) |>
mutate(am = factor(am, levels = c(1, 0), labels = c("manual", "automático")))
# separar conjuntos de entrenamiento y prueba
set.seed(101)
n <- nrow(datos)
i_muestra <- sample.int(n = n, size = floor(0.7 * n), replace = FALSE)
datos_ent <- datos[i_muestra, ]
datos_pru <- datos[-i_muestra, ]
# definir modelos inicial y final
nulo <- glm(am ~ 1, data = datos_ent, family = binomial(link = "logit"))
maxi <- glm(am ~ ., data = datos_ent, family = binomial(link = "logit"))
# revisar un paso hacia adelante
cat("\nPaso 1:\n----------------\n")
print(add1(nulo, scope = maxi))
# actualizar el modelo
modelo1 <- update(nulo, . ~ . + wt)
# revisar un paso hacia adelante
cat("\nPaso 2:\n----------------\n")
print(add1(modelo1, scope = maxi))
# actualizar el modelo
modelo2 <- update(modelo1, . ~ . + mpg)
# revisar un paso hacia adelante
cat("\nPaso 3:\n----------------\n")
print(add1(modelo2, scope = maxi))
# mostrar modelo obtenido
cat("\nModelo RLog obtenido:\n----------------\n")
print(summary(modelo2))
# comparar modelos generados
print(anova(modelo1, modelo2, test = "LRT"))
# reestablecer opcion para warnings
options(warn = opt[[1]], width = opt[[2]])
library(ggpubr)
library(dplyr)
opt <- options(warn = 1, width = 26)
# cargar y filtrar datos, solo predictores numéricos
datos <- mtcars |> filter(wt > 2 & wt < 5) |>
select(-c("cyl", "vs", "gear", "carb")) |>
mutate(am = factor(am, levels = c(1, 0), labels = c("manual", "automático")))
# separar conjuntos de entrenamiento y prueba
set.seed(101)
n <- nrow(datos)
i_muestra <- sample.int(n = n, size = floor(0.7 * n), replace = FALSE)
datos_ent <- datos[i_muestra, ]
datos_pru <- datos[-i_muestra, ]
# definir modelos inicial y final
nulo <- glm(am ~ 1, data = datos_ent, family = binomial(link = "logit"))
maxi <- glm(am ~ ., data = datos_ent, family = binomial(link = "logit"))
# revisar un paso hacia adelante
cat("\nPaso 1:\n----------------\n")
print(add1(nulo, scope = maxi))
# actualizar el modelo
modelo1 <- update(nulo, . ~ . + wt)
# revisar un paso hacia adelante
cat("\nPaso 2:\n----------------\n")
print(add1(modelo1, scope = maxi))
# actualizar el modelo
modelo2 <- update(modelo1, . ~ . + mpg)
# revisar un paso hacia adelante
cat("\nPaso 3:\n----------------\n")
print(add1(modelo2, scope = maxi))
# mostrar modelo obtenido
cat("\nModelo RLog obtenido:\n----------------\n")
print(summary(modelo2))
# comparar modelos generados
print(anova(modelo1, modelo2, test = "LRT"))
# reestablecer opcion para warnings
options(warn = opt[[1]], width = opt[[2]])
library(ggpubr)
library(dplyr)
opt <- options(warn = 1)
# cargar y filtrar datos, solo predictores numéricos
datos <- mtcars |> filter(wt > 2 & wt < 5) |>
select(-c("cyl", "vs", "gear", "carb")) |>
mutate(am = factor(am, levels = c(1, 0), labels = c("manual", "automático")))
# separar conjuntos de entrenamiento y prueba
set.seed(101)
n <- nrow(datos)
i_muestra <- sample.int(n = n, size = floor(0.7 * n), replace = FALSE)
datos_ent <- datos[i_muestra, ]
datos_pru <- datos[-i_muestra, ]
# definir modelos inicial y final
nulo <- glm(am ~ 1, data = datos_ent, family = binomial(link = "logit"))
maxi <- glm(am ~ ., data = datos_ent, family = binomial(link = "logit"))
# revisar un paso hacia adelante
cat("\nPaso 1:\n----------------\n")
print(add1(nulo, scope = maxi))
# actualizar el modelo
modelo1 <- update(nulo, . ~ . + wt)
# revisar un paso hacia adelante
cat("\nPaso 2:\n----------------\n")
print(add1(modelo1, scope = maxi))
# actualizar el modelo
modelo2 <- update(modelo1, . ~ . + mpg)
# revisar un paso hacia adelante
cat("\nPaso 3:\n----------------\n")
print(add1(modelo2, scope = maxi))
# mostrar modelo obtenido
cat("\nModelo RLog obtenido:\n----------------\n")
print(summary(modelo2))
# comparar modelos generados
print(anova(modelo1, modelo2, test = "LRT"))
# reestablecer opcion para warnings
options(warn = opt[[1]])
