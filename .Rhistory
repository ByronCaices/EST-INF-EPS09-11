knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datos)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth)
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
paso = drop1(modeloCompleto, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple1 = update(modeloCompleto, . ~ . - Knee.Girth)
paso = drop1(modeloMultiple1, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple2 = update(modeloMultiple1, . ~ . - Chest.diameter)
paso = drop1(modeloMultiple2, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple3 = update(modeloMultiple2, . ~ . - Calf.Maximum.Girth)
print(summary(modeloMultiple2))
print(summary(modeloMultiple3))
modeloMultiple = modeloMultiple2
g1 = residualPlots(modeloSimple, type = "rstandard", id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
print(durbinWatsonTest(modeloSimple))
mm1 = marginalModelPlots(modeloSimple, sd = TRUE, id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datos_30)
knitr::opts_chunk$set(echo = TRUE)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datos)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
View(datosModelos)
View(datosPruebas)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth)
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
datosModelos = datosModelos %>% select(Waist.Girth, Weight, Knee.Girth, Weight, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth, Gender)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
datosModelos = datosModelos %>% select(Waist.Girth, Weight, Knee.Girth, Weight, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth, Gender)
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
datosModelos = datosModelos %>% select(Waist.Girth, Knee.Girth, Weight, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth, Gender)
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
paso = drop1(modeloCompleto, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Waist.Girth, Knee.Girth, Weight, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
paso = drop1(modeloCompleto, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple1 = update(modeloCompleto, . ~ . - Knee.Girth)
paso = drop1(modeloMultiple1, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple2 = update(modeloMultiple1, . ~ . - Chest.diameter)
paso = drop1(modeloMultiple2, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple3 = update(modeloMultiple2, . ~ . - Calf.Maximum.Girth)
print(summary(modeloMultiple2))
print(summary(modeloMultiple3))
modeloMultiple = modeloMultiple2
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
p1 <- ggscatter(datosModelos, x = Waist.Girth, y = Weight,
add = "reg.line", add.params = list(color = "blue"))
View(datosModelos)
p1 <- ggscatter(datosModelos, x = "Waist.Girth", y = Weight,
add = "reg.line", add.params = list(color = "blue"))
p1 <- ggscatter(datosModelos, x = "Waist.Girth", y = "Weight",
add = "reg.line", add.params = list(color = "blue"))
print(p1)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
p1 <- ggscatter(datosModelos, x = "Waist.Girth", y = "Weight",
add = "reg.line", add.params = list(color = "blue"))
print(p1)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>% select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
paso = drop1(modeloCompleto, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple1 = update(modeloCompleto, . ~ . - Knee.Girth)
paso = drop1(modeloMultiple1, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple2 = update(modeloMultiple1, . ~ . - Chest.diameter)
paso = drop1(modeloMultiple2, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple3 = update(modeloMultiple2, . ~ . - Calf.Maximum.Girth)
print(summary(modeloMultiple2))
print(summary(modeloMultiple3))
modeloMultiple = modeloMultiple2
g1 = residualPlots(modeloSimple, type = "rstandard", id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
print(durbinWatsonTest(modeloSimple))
mm1 = marginalModelPlots(modeloSimple, sd = TRUE, id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datos_30)
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datos_30[["Weight"]] - prediccionesSimple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_prueba = sqrt(mean(errorSimple) ** 2)
knitr::opts_chunk$set(echo = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!requireNamespace('tidyverse', quietly = TRUE)){
install.packages('tidyverse')
}
library(tidyverse)
if (!requireNamespace('ggpubr', quietly = TRUE)){
install.packages('ggpubr')
}
library(car)
if (!requireNamespace('car', quietly = TRUE)){
install.packages('car')
}
library(ggpubr)
if (!requireNamespace('ez', quietly = TRUE)){
install.packages('ez')
}
library(ez)
if (!requireNamespace('RVAideMemoire', quietly = TRUE)){
install.packages('RVAideMemoire')
}
library(RVAideMemoire)
if (!requireNamespace('rcompanion', quietly = TRUE)){
install.packages('rcompanion')
}
library(rcompanion)
if (!requireNamespace('dplyr', quietly = TRUE)){
install.packages('dplyr')
}
library(dplyr)
if (!requireNamespace('WRS2', quietly = TRUE)){
install.packages('WRS2')
}
library(WRS2)
datosGenerales <- read.csv2("EP09 Datos.csv")
head(datosGenerales)
set.seed(7525)
datos = datosGenerales %>% filter(Gender == 1) %>% sample_n(100)
i_datos = sample.int(n = 100, size = 70, replace = FALSE)
datosModelos = datos[i_datos,]
datosPruebas = datos[-i_datos,]
predictores = sample(colnames(datos), 8)
print(predictores)
p1 <- ggscatter(datosModelos, x = "Waist.Girth", y = "Weight",
add = "reg.line", add.params = list(color = "blue"))
print(p1)
modeloSimple = lm(Weight ~ Waist.Girth, data = datosModelos)
print(summary(modeloSimple))
datosModelos = datosModelos %>%
select(Weight, Waist.Girth, Knee.Girth, Chest.diameter, Wrist.Minimum.Girth, Thigh.Girth, Height, Calf.Maximum.Girth) # Gender no aplica
modeloCompleto = lm(Weight ~ ., data = datosModelos)
print(summary(modeloCompleto))
paso = drop1(modeloCompleto, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple1 = update(modeloCompleto, . ~ . - Knee.Girth)
paso = drop1(modeloMultiple1, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple2 = update(modeloMultiple1, . ~ . - Chest.diameter)
paso = drop1(modeloMultiple2, test = "F")
print(paso, digits = 3, signif.legend = TRUE)
modeloMultiple3 = update(modeloMultiple2, . ~ . - Calf.Maximum.Girth)
print(summary(modeloMultiple2))
print(summary(modeloMultiple3))
modeloMultiple = modeloMultiple2
g1 = residualPlots(modeloSimple, type = "rstandard", id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
print(durbinWatsonTest(modeloSimple))
mm1 = marginalModelPlots(modeloSimple, sd = TRUE, id=list(method = "r", n = 3, cex = 0.7, location = "lr"),
col = "steelblue", pch = 20, col.quad = c("steelblue", "red"))
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n")
cat("Cambio en el error:", round(cambioError, 2), "\n")
cat("\n")
cat("Rendimiento del modelo de RLM:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n")
cat("Cambio en el error:", round(cambioError2, 2), "\n")
View(datosModelos)
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n")
cat("Cambio en el error:", round(cambioError, 2), "\n")
cat("\n")
cat("Rendimiento del modelo de RLM:\n")
cat("RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n")
cat("RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n")
cat("Cambio en el error:", round(cambioError2, 2), "\n")
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
print("Rendimiento del modelo de RLS:\n")
print("RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n")
#modelo simple
rmse_modeloSimple = sqrt(mean(resid(modeloSimple) ** 2))
prediccionesSimple = predict(modeloSimple, datosPruebas)
errorSimple = datosPruebas[["Weight"]] - prediccionesSimple
rmse_pruebaSimple = sqrt(mean(errorSimple) ** 2)
cambioError = (rmse_pruebaSimple -rmse_modeloSimple) / rmse_modeloSimple * 100
#modelo multiple
rmse_modeloMultiple = sqrt(mean(resid(modeloMultiple)**2))
prediccionesMultiple = predict(modeloMultiple,datosPruebas)
errorMultiple = datosPruebas[["Weight"]] -prediccionesMultiple
rmse_pruebaMultiple = sqrt(mean(errorMultiple) ** 2)
cambioError2 = (rmse_pruebaMultiple - rmse_modeloMultiple) / rmse_modeloMultiple * 100
cat("Rendimiento del modelo de RLS:\n
RMSE para el conjunto de entrenamiento:", round(rmse_modeloSimple, 3), "\n
RMSE para el conjunto de prueba:", round(rmse_pruebaSimple, 3), "\n
Cambio en el error:", round(cambioError, 2), "\n
\n
Rendimiento del modelo de RLM:\n
RMSE para el conjunto de entrenamiento:", round(rmse_modeloMultiple, 3), "\n
RMSE para el conjunto de prueba:", round(rmse_pruebaMultiple, 3), "\n
Cambio en el error:", round(cambioError2, 2), "\n")
